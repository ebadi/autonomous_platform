/** CAN message encoder/decoder: automatically generated - do not edit
  * Generated by dbcc: See https://github.com/howerj/dbcc */
#ifndef CAN_DB_H
#define CAN_DB_H

/* If the contents of this file have caused breaking changes for you, you could try using
   an older version of the generator. You can specify this on the command line with
   the -n option. */
#define DBCC_GENERATOR_VERSION 2

#include <stdint.h>
#include <stdio.h>

#ifdef __cplusplus
extern "C" { 
#endif

#ifndef PREPACK
#define PREPACK
#endif

#ifndef POSTPACK
#define POSTPACK
#endif

#ifndef DBCC_TIME_STAMP
#define DBCC_TIME_STAMP
typedef uint32_t dbcc_time_stamp_t; /* Time stamp for message; you decide on units */
#endif

#ifndef DBCC_STATUS_ENUM
#define DBCC_STATUS_ENUM
typedef enum {
	DBCC_SIG_STAT_UNINITIALIZED_E = 0, /* Message never sent/received */
	DBCC_SIG_STAT_OK_E            = 1, /* Message ok */
	DBCC_SIG_STAT_ERROR_E         = 2, /* Encode/Decode/Timestamp/Any error */
} dbcc_signal_status_e;
#endif

#define CAN_ID_REQUEST_HEARTBEAT 100
#define CAN_ID_RESPONSE_HEARTBEAT_SPCU 101
#define CAN_ID_RESPONSE_HEARTBEAT_XXX 102
#define CAN_ID_ERROR_SPCU 500
#define CAN_ID_SET_SPCU 1000
#define CAN_ID_GET_SPEED_SENSOR 1500
#define CAN_ID_GET_SPCU 2000

/* To see if the node is still running */
typedef PREPACK struct {
	/* Sig_Req_Heartbeat: Request heartbeat signal from HW nodes */
	/* scaling 1.0, offset 0.0, units none  */
	uint64_t Sig_Req_Heartbeat;
} POSTPACK can_0x064_Request_Heartbeat_t;

/* Responds to a request heartbeat frame */
typedef PREPACK struct {
	/* Response_Heartbeat_sig: Sends a value of 1 to respond to a heartbeat request */
	/* scaling 1.0, offset 0.0, units none  */
	uint8_t Response_Heartbeat_sig;
} POSTPACK can_0x065_Response_Heartbeat_SPCU_t;

typedef PREPACK struct {
} POSTPACK can_0x066_Response_Heartbeat_XXX_t;

/* Error Handler frame */
typedef PREPACK struct {
	/* Heartbeat: heartbeat to detect that the ecu is still active */
	/* scaling 1.0, offset 0.0, units Bool  */
	uint8_t Heartbeat;
	/* Propulsion_Error: Boolean to detect if some error has occrued in propulsion control */
	/* scaling 1.0, offset 0.0, units Bool  */
	uint8_t Propulsion_Error;
	/* Steering_Error: Boolean to detect if some error has occured in Steering Control */
	/* scaling 1.0, offset 0.0, units Bool  */
	uint8_t Steering_Error;
} POSTPACK can_0x1f4_Error_SPCU_t;

/* Set values */
typedef PREPACK struct {
	uint16_t Act_BreakVoltage; /* scaling 1.0, offset 0.0, units mV  */
	/* Act_ThrottleVoltage:  */
	/* scaling 1.0, offset 0.0, units mV  */
	uint16_t Act_ThrottleVoltage;
	int8_t Act_SteeringPosition; /* scaling 1.0, offset 0.0, units Degree  */
	uint8_t Act_SteeringVelocity; /* scaling 1.0, offset 0.0, units units/s  */
	uint8_t Act_Reverse; /* scaling 1.0, offset 0.0, units Bool  */
} POSTPACK can_0x3e8_Set_SPCU_t;

/* Get speed sensor reading */
typedef PREPACK struct {
	uint8_t Get_Velocity; /* scaling 100.0, offset 0.0, units cm/s  */
} POSTPACK can_0x5dc_Get_Speed_Sensor_t;

/* Get sensor reading */
typedef PREPACK struct {
	int16_t Get_SteeringAngle; /* scaling 1.0, offset 0.0, units Degree  */
	uint8_t Get_ReverseMode; /* scaling 1.0, offset 0.0, units Bool  */
} POSTPACK can_0x7d0_Get_SPCU_t;

typedef PREPACK struct {
	dbcc_time_stamp_t can_0x064_Request_Heartbeat_time_stamp_rx;
	dbcc_time_stamp_t can_0x065_Response_Heartbeat_SPCU_time_stamp_rx;
	dbcc_time_stamp_t can_0x066_Response_Heartbeat_XXX_time_stamp_rx;
	dbcc_time_stamp_t can_0x1f4_Error_SPCU_time_stamp_rx;
	dbcc_time_stamp_t can_0x3e8_Set_SPCU_time_stamp_rx;
	dbcc_time_stamp_t can_0x5dc_Get_Speed_Sensor_time_stamp_rx;
	dbcc_time_stamp_t can_0x7d0_Get_SPCU_time_stamp_rx;
	unsigned can_0x064_Request_Heartbeat_status : 2;
	unsigned can_0x064_Request_Heartbeat_tx : 1;
	unsigned can_0x064_Request_Heartbeat_rx : 1;
	unsigned can_0x065_Response_Heartbeat_SPCU_status : 2;
	unsigned can_0x065_Response_Heartbeat_SPCU_tx : 1;
	unsigned can_0x065_Response_Heartbeat_SPCU_rx : 1;
	unsigned can_0x066_Response_Heartbeat_XXX_status : 2;
	unsigned can_0x066_Response_Heartbeat_XXX_tx : 1;
	unsigned can_0x066_Response_Heartbeat_XXX_rx : 1;
	unsigned can_0x1f4_Error_SPCU_status : 2;
	unsigned can_0x1f4_Error_SPCU_tx : 1;
	unsigned can_0x1f4_Error_SPCU_rx : 1;
	unsigned can_0x3e8_Set_SPCU_status : 2;
	unsigned can_0x3e8_Set_SPCU_tx : 1;
	unsigned can_0x3e8_Set_SPCU_rx : 1;
	unsigned can_0x5dc_Get_Speed_Sensor_status : 2;
	unsigned can_0x5dc_Get_Speed_Sensor_tx : 1;
	unsigned can_0x5dc_Get_Speed_Sensor_rx : 1;
	unsigned can_0x7d0_Get_SPCU_status : 2;
	unsigned can_0x7d0_Get_SPCU_tx : 1;
	unsigned can_0x7d0_Get_SPCU_rx : 1;
	can_0x064_Request_Heartbeat_t can_0x064_Request_Heartbeat;
	can_0x065_Response_Heartbeat_SPCU_t can_0x065_Response_Heartbeat_SPCU;
	can_0x066_Response_Heartbeat_XXX_t can_0x066_Response_Heartbeat_XXX;
	can_0x1f4_Error_SPCU_t can_0x1f4_Error_SPCU;
	can_0x3e8_Set_SPCU_t can_0x3e8_Set_SPCU;
	can_0x5dc_Get_Speed_Sensor_t can_0x5dc_Get_Speed_Sensor;
	can_0x7d0_Get_SPCU_t can_0x7d0_Get_SPCU;
} POSTPACK can_obj_can_db_h_t;

int unpack_message(can_obj_can_db_h_t *o, const unsigned long id, uint64_t data, uint8_t dlc, dbcc_time_stamp_t time_stamp);
int pack_message(can_obj_can_db_h_t *o, const unsigned long id, uint64_t *data);
int print_message(const can_obj_can_db_h_t *o, const unsigned long id, FILE *output);

int decode_can_0x064_Sig_Req_Heartbeat(const can_obj_can_db_h_t *o, uint64_t *out);
int encode_can_0x064_Sig_Req_Heartbeat(can_obj_can_db_h_t *o, uint64_t in);


int decode_can_0x065_Response_Heartbeat_sig(const can_obj_can_db_h_t *o, uint8_t *out);
int encode_can_0x065_Response_Heartbeat_sig(can_obj_can_db_h_t *o, uint8_t in);




int decode_can_0x1f4_Heartbeat(const can_obj_can_db_h_t *o, uint8_t *out);
int encode_can_0x1f4_Heartbeat(can_obj_can_db_h_t *o, uint8_t in);
int decode_can_0x1f4_Propulsion_Error(const can_obj_can_db_h_t *o, uint8_t *out);
int encode_can_0x1f4_Propulsion_Error(can_obj_can_db_h_t *o, uint8_t in);
int decode_can_0x1f4_Steering_Error(const can_obj_can_db_h_t *o, uint8_t *out);
int encode_can_0x1f4_Steering_Error(can_obj_can_db_h_t *o, uint8_t in);


int decode_can_0x3e8_Act_BreakVoltage(const can_obj_can_db_h_t *o, uint16_t *out);
int encode_can_0x3e8_Act_BreakVoltage(can_obj_can_db_h_t *o, uint16_t in);
int decode_can_0x3e8_Act_ThrottleVoltage(const can_obj_can_db_h_t *o, uint16_t *out);
int encode_can_0x3e8_Act_ThrottleVoltage(can_obj_can_db_h_t *o, uint16_t in);
int decode_can_0x3e8_Act_SteeringPosition(const can_obj_can_db_h_t *o, int8_t *out);
int encode_can_0x3e8_Act_SteeringPosition(can_obj_can_db_h_t *o, int8_t in);
int decode_can_0x3e8_Act_SteeringVelocity(const can_obj_can_db_h_t *o, uint8_t *out);
int encode_can_0x3e8_Act_SteeringVelocity(can_obj_can_db_h_t *o, uint8_t in);
int decode_can_0x3e8_Act_Reverse(const can_obj_can_db_h_t *o, uint8_t *out);
int encode_can_0x3e8_Act_Reverse(can_obj_can_db_h_t *o, uint8_t in);


int decode_can_0x5dc_Get_Velocity(const can_obj_can_db_h_t *o, uint8_t *out);
int encode_can_0x5dc_Get_Velocity(can_obj_can_db_h_t *o, uint8_t in);


int decode_can_0x7d0_Get_SteeringAngle(const can_obj_can_db_h_t *o, int16_t *out);
int encode_can_0x7d0_Get_SteeringAngle(can_obj_can_db_h_t *o, int16_t in);
int decode_can_0x7d0_Get_ReverseMode(const can_obj_can_db_h_t *o, uint8_t *out);
int encode_can_0x7d0_Get_ReverseMode(can_obj_can_db_h_t *o, uint8_t in);


#ifdef __cplusplus
} 
#endif

#endif
